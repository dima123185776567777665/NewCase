<html>
    <title>разновидности языков компьютера</title>
    <body style="background-color:#000000;color:#FFFF00">
        <header>разновидности языков компьютера 
        
        </header>
        <main>
            <h1>про языки</h1>
            <h2> развитие языков</h2>
            <p>Машинные коды и ассемблер
Физические принципы работы электронных устройств ЭВМ таковы, что компьютер может воспринимать команды, состоящие только из единиц и нулей — последовательность перепада напряжения, то есть машинный код. На начальной стадии развития ЭВМ человеку было необходимо составлять программы на языке, понятном компьютеру, в машинных кодах. Каждая команда состояла из кода операций и адресов операндов, выраженных в виде различных сочетаний единиц и нулей. Итак, любая программа для процессора выглядела на то время как последовательность единиц и нулей.

Как показала в дальнейшем практика общения с компьютером, такой язык громоздок и неудобен. При пользовании им легко допустить ошибку, записав не в той последовательности 1 или 0. Программу очень трудно контролировать. Кроме того, при программировании в машинных кодах надо хорошо знать внутреннюю структуру ЭВМ, принцип работы каждого блока. И самое плохое в таком языке, что программы на данном языке — очень длинные последовательности единиц и нулей являются машинно зависимыми, то есть для каждой ЭВМ необходимо было составлять свою программу, а также программирование в машинных кодах требует от программиста много времени, труда, повышенного внимания.

Довольно скоро стало понятно, что процесс формирования машинного кода можно автоматизировать. Уже в 1950 году для записи программ начали применять мнемонический язык — язык ассемблера. Язык ассемблера позволил представить машинный код в более удобной для человека форме: для обозначения команд и объектов, над которыми эти команды выполняются, вместо двоичных кодов использовались буквы или сокращенные слова, которые отражали суть команды. Например, на языке ассемблера команда сложения двух чисел обозначается словом add, тогда как ее машинный код может быть таким: 000010.

Ассемблер — язык программирования низкого уровня. Язык программирования низкого уровня — язык программирования, который ориентирован на конкретный тип процессора и учитывает его особенности. В данном случае «низкий уровень» не значит «плохой». Имеется в виду, что операторы языка близки к машинному коду и ориентированы на конкретные команды процессора. Появление языка ассемблера значительно облегчило жизнь программистов, так как теперь вместо рябящих в глазах нулей и единиц, они могли писать программу командами, состоящими из символов приближенных к обычному языку. Для того времени этот язык был новшеством и пользовался популярностью так как позволял писать программы небольшого размера, что при тех машинах критерий значительный.

Но сложность разработки в нём больших программных комплексов привела к появлению языков третьего поколения — языков высокого уровня. Но на этом применение ассемблера не закончилось, он пользуется популярностью в узких кругах и по сей день. Сейчас его используют в написании отдельных фрагментов программ или иногда в написании самих программ. Примеров может быть много, но самые яркие это использование ассемблера в написании драйверов, игр и загрузчиков ОС. Не стоит забывать, что у хакеров этот язык так же пользуется популярностью, в связи с тем, что скорость работы полученной программы значительно выше скорости программы написанной на языке программирования высокого уровня. Это объясняется тем, что получившийся размер программы очень мал. Разработчики антивирусов так же используют ассемблер в некоторых модулях своих программ, что так же обеспечивает их быстродействие. </p>
                
             
                    

            <h2> Языки программирования – какие бывают и какой выбрать</h2>
            <p>Языки программирования бывают самыми разными, и просто с ходу ответить, какой из них лучше остальных и какой вам сразу же стоит учить – нельзя, потому что сам вопрос поставлен некорректно: во-первых, серьезное программирование нередко предполагает использование нескольких языков/фреймворков (расширений для языка); во-вторых, «лучший» язык во многом зависит от того, в какой сфере вы хотите работать; в-третьих, через год все может поменяться, и популярный на данный момент язык начнет «скатываться». Вместо того, чтобы составлять какие-либо ТОПы сомнительной полезности, мы возьмем основные языки программирования для каждой сферы и составим список по значимости. 

</p>
<table>
<tr>
<td>Язык</td>
<td>Где используется </td>
<td>Насколько сложен</td>
</tr>
<tr>
<td>Java</td>
<td>Практмчески везде</td>
<td>5/10</td>
</tr>
<tr>
<td>C#</td>
<td>Серверная часть сайтов и приложений, разработка игр</td>
<td>5/10</td>
</tr>
<tr>
<td>C</td>
<td>Операционные системы, высоконагруженные приложения (в виде вставок кода для оптимизации)</td>
<td>9/10</td>
</tr>
<tr>
<td>C++</td>
<td>Операционные системы, высоконагруженные приложения, игры</td>
<td>8/10</td>
</tr>
</table>
</main>

        </body>
      
    </html>
